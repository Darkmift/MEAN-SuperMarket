{"version":3,"sources":["src/app/auth/login/login.component.html","src/app/auth/signup/signup.component.html","src/app/auth/auth-routing.module.ts","src/app/auth/authGroup.module.ts","src/app/auth/login/login.component.css","src/app/auth/login/login.component.ts","src/app/auth/signup/matchPasswords/must-match.directive.ts","src/app/auth/signup/matchPasswords/must-match.validator.ts","src/app/auth/signup/signup.component.css","src/app/auth/signup/signup.component.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"row sizing\\\">\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- form start -->\\r\\n        <form class=\\\"bg-light p-2 border-custom\\\"\\r\\n          #loginForm=\\\"ngForm\\\"\\r\\n          name=\\\"loginForm\\\"\\r\\n          (ngSubmit)=\\\"onSubmit(loginForm)\\\">\\r\\n\\r\\n          <h6 class=\\\"ml-1\\\">Welcome GUEST, Please Login.</h6>\\r\\n\\r\\n          <!-- email input control -->\\r\\n          <div class=\\\"form-group m-2\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"email\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.email\\\"\\r\\n              #email=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': loginForm.submitted && email.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your email\\\"\\r\\n              required\\r\\n              email />\\r\\n            <div *ngIf=\\\"loginForm.submitted && email.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n              <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email address</div>\\r\\n              <div *ngIf=\\\"email.errors.invalidID\\\">Credntials invalid - maybe a typo on email or password?</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- password input control -->\\r\\n          <div class=\\\"form-group m-2\\\">\\r\\n\\r\\n            <label for=\\\"passowrdId\\\">Password</label>\\r\\n\\r\\n            <input type=\\\"password\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"passowrdId\\\"\\r\\n              placeholder=\\\"Password\\\"\\r\\n              aria-describedby=\\\"passwordError\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.password\\\"\\r\\n              name=\\\"password\\\"\\r\\n              required\\r\\n              #password=\\\"ngModel\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\">\\r\\n\\r\\n            <div *ngIf=\\\"loginForm.submitted && password.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <!-- Submit form/registerLink -->\\r\\n          <div class=\\\"row m-1\\\">\\r\\n\\r\\n            <a class=\\\"mr-auto mt-1\\\"\\r\\n              [routerLink]=\\\"['/auth/signup']\\\">\\r\\n              <span>Not Registered? Click HERE!</span>\\r\\n            </a>\\r\\n\\r\\n            <button type=\\\"submit\\\"\\r\\n              class=\\\"btn btn-primary\\\">\\r\\n              <span>SUBMIT</span>\\r\\n            </button>\\r\\n\\r\\n          </div>\\r\\n          <hr>\\r\\n          <br>\\r\\n        </form>\\r\\n        <!-- form end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"row sizing\\\">\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- signupFormA start -->\\r\\n        <form *ngIf=\\\"!partOneValid\\\"\\r\\n          class=\\\"bg-light p-2 border-custom\\\"\\r\\n          name=\\\"form\\\"\\r\\n          (ngSubmit)=\\\"signupFormA.form.valid && onSubmitPartOne(signupFormA)\\\"\\r\\n          #signupFormA=\\\"ngForm\\\"\\r\\n          [mustMatch]=\\\"['password', 'confirmPassword']\\\"\\r\\n          novalidate>\\r\\n\\r\\n          <!-- tz id -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"tzId\\\">TZ ID</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"tzId\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.tzId\\\"\\r\\n              #tzId=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && tzId.invalid }\\\"\\r\\n              placeholder=\\\"Please enter your 9 digit id\\\"\\r\\n              required\\r\\n              minlength=\\\"9\\\"\\r\\n              maxlength=\\\"9\\\"\\r\\n              pattern=\\\"[0-9]+\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"signupFormA.submitted && tzId.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"tzId.errors.required\\\">Last Name is required</div>\\r\\n              <div *ngIf=\\\"tzId.errors.minlength||tzId.errors.maxlength||tzId.errors.pattern\\\">TzId must be 9 digits</div>\\r\\n              <div *ngIf=\\\"tzId.errors.invalidID\\\">\\r\\n                TzId is in use - please <a [routerLink]=\\\"['/','auth','login']\\\">LOGIN</a>\\r\\n                instead\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- email -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"email\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.email\\\"\\r\\n              #email=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && email.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your email\\\"\\r\\n              required\\r\\n              email />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && email.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n              <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email address</div>\\r\\n              <div *ngIf=\\\"email.errors.unique\\\">This email is already registered please <a\\r\\n                  [routerLink]=\\\"['/','auth','login']\\\">LOGIN</a>\\r\\n                instead</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- password -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"password\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.password\\\"\\r\\n              #password=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && password.invalid }\\\"\\r\\n              placeholder=\\\"Password must be 6 characters long\\\"\\r\\n              required\\r\\n              minlength=\\\"6\\\" />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && password.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n              <div *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- confirm -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"confirmPassword\\\">Confirm Password</label>\\r\\n            <input type=\\\"password\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"confirmPassword\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.confirmPassword\\\"\\r\\n              #confirmPassword=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && confirmPassword.invalid }\\\"\\r\\n              placeholder=\\\"Password must be 6 characters long\\\"\\r\\n              required />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && confirmPassword.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"confirmPassword.errors.required\\\">Confirm Password is required</div>\\r\\n              <div *ngIf=\\\"confirmPassword.errors.mustMatch\\\">Passwords must match</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n\\r\\n            <div *ngIf=\\\"isLoading\\\"\\r\\n              class=\\\"spinner-border text-primary\\\"\\r\\n              role=\\\"status\\\">\\r\\n              <span class=\\\"sr-only\\\">Loading...</span>\\r\\n            </div>\\r\\n\\r\\n            <button *ngIf=\\\"!isLoading\\\"\\r\\n              class=\\\"btn btn-primary\\\">Continue Registration</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n        <!-- signupFormA end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- signupFormB start -->\\r\\n        <form *ngIf=\\\"partOneValid\\\"\\r\\n          class=\\\"bg-light p-2 border-custom\\\"\\r\\n          name=\\\"form\\\"\\r\\n          (ngSubmit)=\\\"signupFormB.form.valid && onSubmitPartTwo(signupFormB)\\\"\\r\\n          #signupFormB=\\\"ngForm\\\"\\r\\n          novalidate>\\r\\n\\r\\n          <!-- firstname -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"firstname\\\">First Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"firstname\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.firstname\\\"\\r\\n              #firstname=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && firstname.invalid }\\\"\\r\\n              placeholder=\\\"Please enter your first name\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"signupFormB.submitted && firstname.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"firstname.errors.required\\\">Please add your first name</div>\\r\\n              <div *ngIf=\\\"firstname.errors.minlength\\\">first name must be at least 3 charcters</div>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- lastname -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"lastname\\\">Last Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"lastname\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.lastname\\\"\\r\\n              #lastname=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && lastname.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your lastname\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n            <div *ngIf=\\\"signupFormB.submitted && lastname.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lastname.errors.required\\\">Please add your last name</div>\\r\\n              <div *ngIf=\\\"lastname.errors.minlength\\\">last name must be at least 3 charcters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- city select -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"city\\\">Select your city</label>\\r\\n            <select class=\\\"form-control\\\"\\r\\n              #city=\\\"ngModel\\\"\\r\\n              name=\\\"city\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && street.invalid }\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.city\\\"\\r\\n              [disabled]=\\\"isReadOnly\\\"\\r\\n              required>\\r\\n              <!-- <option [selected]=\\\"'default'\\\">No Default Layout</option> -->\\r\\n              <option *ngFor=\\\"let option of cityList\\\"\\r\\n                [value]=\\\"option\\\">{{option}}</option>\\r\\n            </select>\\r\\n\\r\\n            <div *ngIf=\\\"signupFormB.submitted && city.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"city.errors.required\\\">Please select your city</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- street -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"street\\\">street Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"street\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.street\\\"\\r\\n              #street=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && street.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your street\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n            <div *ngIf=\\\"signupFormB.submitted && street.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"street.errors.required\\\">Please add your last name</div>\\r\\n              <div *ngIf=\\\"street.errors.minlength\\\">last name must be at least 3 charcters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <button class=\\\"btn btn-primary\\\">Complete Registration</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n        <!-- signupFormB end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, Router, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { BootstrapModuleGroup } from '../bootstrapGroup/bootstrap-modules.module';\r\nimport { MustMatchDirective } from './signup/matchPasswords/must-match.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    SignupComponent,\r\n    MustMatchDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BootstrapModuleGroup,\r\n    FormsModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\n\r\nexport class AuthGroupModule { }\r\n","export default \"\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { AuthService } from '../auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('loginForm', { static: true }) loginForm: NgForm;\r\n  isReadOnly = true;\r\n  submittedUserData = {\r\n    email: 'sysAdmin@email.com',\r\n    password: 'MooCow1',\r\n  };\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService, private toastService: ToastrService) { }\r\n\r\n  ngOnInit() {\r\n    // deal with pesky autocomplete\r\n    setTimeout(() => {\r\n      this.isReadOnly = false;\r\n    }, 1000);\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n\r\n    this.loginForm.form.markAllAsTouched();\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const { email, password } = this.loginForm.value;\r\n\r\n    this.submittedUserData = {\r\n      // tslint:disable-next-line: object-literal-shorthand\r\n      email: email,\r\n      // tslint:disable-next-line: object-literal-shorthand\r\n      password: password,\r\n    };\r\n\r\n    this.authService.login(this.loginForm.value.email, this.loginForm.value.password);\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe((authStatus) => {\r\n      if (!authStatus) {\r\n        this.toastService.error('Please try again', 'Not authorized', { progressBar: true });\r\n        form.controls.email.setErrors({ invalidID: true });\r\n        form.controls.password.setErrors({ invalidID: true });\r\n        this.submittedUserData.password = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    if (this.authStatusSub !== undefined) {\r\n      this.authStatusSub.unsubscribe();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\r\nimport { MustMatch } from './must-match.validator';\r\n\r\n\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: '[mustMatch]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\r\n})\r\nexport class MustMatchDirective {\r\n\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('mustMatch') mustMatch: string[] = [];\r\n\r\n  validate(formGroup: FormGroup): ValidationErrors {\r\n    return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\r\n  }\r\n\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    // return null if controls haven't initialised yet\r\n    if (!control || !matchingControl) {\r\n      return null;\r\n    }\r\n\r\n    // return null if another validator has already found an error on the matchingControl\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return null;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","export default \".form-group{\\r\\n  min-height: 6vw;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFlO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1ncm91cHtcclxuICBtaW4taGVpZ2h0OiA2dnc7XHJcbn0iXX0= */\"","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Applicant } from '../models/applicant.model';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\n\r\nexport class SignupComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n  constructor(public authService: AuthService, ) { }\r\n\r\n  isLoading = true;\r\n  isReadOnly = true;\r\n  tempUserName = 'GUEST';\r\n  submittedUserData: Applicant;\r\n  partOneValid = false;\r\n  private validTzId: Subscription;\r\n  cannotRegisterId = false;\r\n\r\n  cityList = ['Select City', 'Tel-Aviv', 'Holon', 'Arad', `Be'er Sheva`, 'Yokneam', 'Rehovot', 'Safed', 'Netivot', 'Eilat', 'Metula'];\r\n\r\n  ngOnInit() {\r\n    this.isLoading = false;\r\n    // init user data model for ngform use\r\n    this.submittedUserData = {\r\n      // DEV VARS -- DELETE before production!\r\n      email: 'test2@email.com',\r\n      tzId: '789546322',\r\n      password: 'MooCow1',\r\n      confirmPassword: 'MooCow1',\r\n      city: this.cityList[4],\r\n      street: 'Moo St',\r\n      firstname: 'Jerry',\r\n      lastname: 'Seinfeld',\r\n      // PROD VARS -- ENABLE before production\r\n      // email: '',\r\n      // tzId: '',\r\n      // password: '',\r\n      // confirmPassword: '',\r\n      // city: '',\r\n      // street: '',\r\n      // firstname: '',\r\n      // lastname: '',\r\n    };\r\n\r\n    // deal with pesky autocomplete\r\n    setTimeout(() => {\r\n      this.isReadOnly = false;\r\n    }, 1000);\r\n    this.submittedUserData.city = this.cityList[0];\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n  onSubmitPartOne(form: NgForm) {\r\n\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.uniqueIdAndEmail(this.submittedUserData.tzId, this.submittedUserData.email);\r\n\r\n    // handle this.authservice.uniqueIdAndEmail() response\r\n    this.validTzId = this.authService.validEmailandTzId().subscribe((response) => {\r\n      this.isLoading = false;\r\n      this.partOneValid = response.canUseTzId && response.canUseEmail;\r\n      if (!response.canUseTzId) {\r\n        this.cannotRegisterId = true;\r\n        form.controls.tzId.setErrors({ invalidID: true });\r\n      }\r\n\r\n      if (!response.canUseEmail) {\r\n        this.cannotRegisterId = true;\r\n        form.controls.email.setErrors({ unique: true });\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  onSubmitPartTwo(form: NgForm) {\r\n\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    const applicant = this.submittedUserData;\r\n\r\n    const registerUserData: User = {\r\n      email: applicant.email,\r\n      iic: applicant.tzId,\r\n      password: applicant.password,\r\n      city: applicant.city,\r\n      street: applicant.street,\r\n      firstName: applicant.firstname,\r\n      lastName: applicant.lastname,\r\n      role: false,\r\n      id: '',\r\n    };\r\n    this.isLoading = true;\r\n    this.authService.createUser(registerUserData);\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.validTzId !== undefined) {\r\n      this.validTzId.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}