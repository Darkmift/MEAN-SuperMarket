{"version":3,"sources":["./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/authGroup.module.ts","./src/app/auth/login/login.component.css","./src/app/auth/login/login.component.ts","./src/app/auth/signup/matchPasswords/must-match.directive.ts","./src/app/auth/signup/matchPasswords/must-match.validator.ts","./src/app/auth/signup/signup.component.css","./src/app/auth/signup/signup.component.ts"],"names":[],"mappings":"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","file":"auth-authGroup-module-es2015.js","sourcesContent":["export default \"<div class=\\\"row sizing\\\">\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- form start -->\\r\\n        <form class=\\\"bg-light p-2 border-custom\\\"\\r\\n          #loginForm=\\\"ngForm\\\"\\r\\n          name=\\\"loginForm\\\"\\r\\n          (ngSubmit)=\\\"onSubmit(loginForm)\\\">\\r\\n\\r\\n          <h6 class=\\\"ml-1\\\">Welcome GUEST, Please Login.</h6>\\r\\n\\r\\n          <!-- email input control -->\\r\\n          <div class=\\\"form-group m-2\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"email\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.email\\\"\\r\\n              #email=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': loginForm.submitted && email.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your email\\\"\\r\\n              required\\r\\n              email />\\r\\n            <div *ngIf=\\\"loginForm.submitted && email.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n              <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email address</div>\\r\\n              <div *ngIf=\\\"email.errors.invalidID\\\">Credntials invalid - maybe a typo on email or password?</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- password input control -->\\r\\n          <div class=\\\"form-group m-2\\\">\\r\\n\\r\\n            <label for=\\\"passowrdId\\\">Password</label>\\r\\n\\r\\n            <input type=\\\"password\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"passowrdId\\\"\\r\\n              placeholder=\\\"Password\\\"\\r\\n              aria-describedby=\\\"passwordError\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.password\\\"\\r\\n              name=\\\"password\\\"\\r\\n              required\\r\\n              #password=\\\"ngModel\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\">\\r\\n\\r\\n            <div *ngIf=\\\"loginForm.submitted && password.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <!-- Submit form/registerLink -->\\r\\n          <div class=\\\"row m-1\\\">\\r\\n\\r\\n            <a class=\\\"mr-auto mt-1\\\"\\r\\n              [routerLink]=\\\"['/auth/signup']\\\">\\r\\n              <span>Not Registered? Click HERE!</span>\\r\\n            </a>\\r\\n\\r\\n            <button type=\\\"submit\\\"\\r\\n              class=\\\"btn btn-primary\\\">\\r\\n              <span>SUBMIT</span>\\r\\n            </button>\\r\\n\\r\\n          </div>\\r\\n          <hr>\\r\\n          <br>\\r\\n        </form>\\r\\n        <!-- form end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"row sizing\\\">\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- signupFormA start -->\\r\\n        <form *ngIf=\\\"!partOneValid\\\"\\r\\n          class=\\\"bg-light p-2 border-custom\\\"\\r\\n          name=\\\"form\\\"\\r\\n          (ngSubmit)=\\\"signupFormA.form.valid && onSubmitPartOne(signupFormA)\\\"\\r\\n          #signupFormA=\\\"ngForm\\\"\\r\\n          [mustMatch]=\\\"['password', 'confirmPassword']\\\"\\r\\n          novalidate>\\r\\n\\r\\n          <!-- tz id -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"tzId\\\">TZ ID</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"tzId\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.tzId\\\"\\r\\n              #tzId=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && tzId.invalid }\\\"\\r\\n              placeholder=\\\"Please enter your 9 digit id\\\"\\r\\n              required\\r\\n              minlength=\\\"9\\\"\\r\\n              maxlength=\\\"9\\\"\\r\\n              pattern=\\\"[0-9]+\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"signupFormA.submitted && tzId.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"tzId.errors.required\\\">Last Name is required</div>\\r\\n              <div *ngIf=\\\"tzId.errors.minlength||tzId.errors.maxlength||tzId.errors.pattern\\\">TzId must be 9 digits</div>\\r\\n              <div *ngIf=\\\"tzId.errors.invalidID\\\">\\r\\n                TzId is in use - please <a [routerLink]=\\\"['/','auth','login']\\\">LOGIN</a>\\r\\n                instead\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- email -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">Email</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"email\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.email\\\"\\r\\n              #email=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && email.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your email\\\"\\r\\n              required\\r\\n              email />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && email.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n              <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email address</div>\\r\\n              <div *ngIf=\\\"email.errors.unique\\\">This email is already registered please <a\\r\\n                  [routerLink]=\\\"['/','auth','login']\\\">LOGIN</a>\\r\\n                instead</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- password -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"password\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.password\\\"\\r\\n              #password=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && password.invalid }\\\"\\r\\n              placeholder=\\\"Password must be 6 characters long\\\"\\r\\n              required\\r\\n              minlength=\\\"6\\\" />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && password.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n              <div *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- confirm -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"confirmPassword\\\">Confirm Password</label>\\r\\n            <input type=\\\"password\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"confirmPassword\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.confirmPassword\\\"\\r\\n              #confirmPassword=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormA.submitted && confirmPassword.invalid }\\\"\\r\\n              placeholder=\\\"Password must be 6 characters long\\\"\\r\\n              required />\\r\\n            <div *ngIf=\\\"signupFormA.submitted && confirmPassword.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"confirmPassword.errors.required\\\">Confirm Password is required</div>\\r\\n              <div *ngIf=\\\"confirmPassword.errors.mustMatch\\\">Passwords must match</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n\\r\\n            <div *ngIf=\\\"isLoading\\\"\\r\\n              class=\\\"spinner-border text-primary\\\"\\r\\n              role=\\\"status\\\">\\r\\n              <span class=\\\"sr-only\\\">Loading...</span>\\r\\n            </div>\\r\\n\\r\\n            <button *ngIf=\\\"!isLoading\\\"\\r\\n              class=\\\"btn btn-primary\\\">Continue Registration</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n        <!-- signupFormA end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n\\r\\n        <!-- signupFormB start -->\\r\\n        <form *ngIf=\\\"partOneValid\\\"\\r\\n          class=\\\"bg-light p-2 border-custom\\\"\\r\\n          name=\\\"form\\\"\\r\\n          (ngSubmit)=\\\"signupFormB.form.valid && onSubmitPartTwo(signupFormB)\\\"\\r\\n          #signupFormB=\\\"ngForm\\\"\\r\\n          novalidate>\\r\\n\\r\\n          <!-- firstname -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"firstname\\\">First Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"firstname\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.firstname\\\"\\r\\n              #firstname=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && firstname.invalid }\\\"\\r\\n              placeholder=\\\"Please enter your first name\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"signupFormB.submitted && firstname.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"firstname.errors.required\\\">Please add your first name</div>\\r\\n              <div *ngIf=\\\"firstname.errors.minlength\\\">first name must be at least 3 charcters</div>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- lastname -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"lastname\\\">Last Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"lastname\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.lastname\\\"\\r\\n              #lastname=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && lastname.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your lastname\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n            <div *ngIf=\\\"signupFormB.submitted && lastname.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lastname.errors.required\\\">Please add your last name</div>\\r\\n              <div *ngIf=\\\"lastname.errors.minlength\\\">last name must be at least 3 charcters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- city select -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"city\\\">Select your city</label>\\r\\n            <select class=\\\"form-control\\\"\\r\\n              #city=\\\"ngModel\\\"\\r\\n              name=\\\"city\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && street.invalid }\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.city\\\"\\r\\n              [disabled]=\\\"isReadOnly\\\"\\r\\n              required>\\r\\n              <!-- <option [selected]=\\\"'default'\\\">No Default Layout</option> -->\\r\\n              <option *ngFor=\\\"let option of cityList\\\"\\r\\n                [value]=\\\"option\\\">{{option}}</option>\\r\\n            </select>\\r\\n\\r\\n            <div *ngIf=\\\"signupFormB.submitted && city.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"city.errors.required\\\">Please select your city</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- street -->\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"street\\\">street Name</label>\\r\\n            <input type=\\\"text\\\"\\r\\n              [readonly]=\\\"isReadOnly\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"street\\\"\\r\\n              [(ngModel)]=\\\"submittedUserData.street\\\"\\r\\n              #street=\\\"ngModel\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': signupFormB.submitted && street.invalid }\\\"\\r\\n              placeholder=\\\"Please provide your street\\\"\\r\\n              required\\r\\n              minlength=\\\"3\\\" />\\r\\n            <div *ngIf=\\\"signupFormB.submitted && street.invalid\\\"\\r\\n              class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"street.errors.required\\\">Please add your last name</div>\\r\\n              <div *ngIf=\\\"street.errors.minlength\\\">last name must be at least 3 charcters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <button class=\\\"btn btn-primary\\\">Complete Registration</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n        <!-- signupFormB end -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"col-4 padding-custom\\\">\\r\\n    <div class=\\\"card mt-1 bg-light-blue\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, Router, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { BootstrapModuleGroup } from '../bootstrapGroup/bootstrap-modules.module';\r\nimport { MustMatchDirective } from './signup/matchPasswords/must-match.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    SignupComponent,\r\n    MustMatchDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BootstrapModuleGroup,\r\n    FormsModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\n\r\nexport class AuthGroupModule { }\r\n","export default \"\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { AuthService } from '../auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('loginForm', { static: true }) loginForm: NgForm;\r\n  isReadOnly = true;\r\n  submittedUserData = {\r\n    email: 'sysAdmin@email.com',\r\n    password: 'MooCow1',\r\n  };\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService, private toastService: ToastrService) { }\r\n\r\n  ngOnInit() {\r\n    // deal with pesky autocomplete\r\n    setTimeout(() => {\r\n      this.isReadOnly = false;\r\n    }, 1000);\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n\r\n    this.loginForm.form.markAllAsTouched();\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const { email, password } = this.loginForm.value;\r\n\r\n    this.submittedUserData = {\r\n      // tslint:disable-next-line: object-literal-shorthand\r\n      email: email,\r\n      // tslint:disable-next-line: object-literal-shorthand\r\n      password: password,\r\n    };\r\n\r\n    this.authService.login(this.loginForm.value.email, this.loginForm.value.password);\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe((authStatus) => {\r\n      if (!authStatus) {\r\n        this.toastService.error('Please try again', 'Not authorized', { progressBar: true });\r\n        form.controls.email.setErrors({ invalidID: true });\r\n        form.controls.password.setErrors({ invalidID: true });\r\n        this.submittedUserData.password = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    if (this.authStatusSub !== undefined) {\r\n      this.authStatusSub.unsubscribe();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\r\nimport { MustMatch } from './must-match.validator';\r\n\r\n\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: '[mustMatch]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\r\n})\r\nexport class MustMatchDirective {\r\n\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('mustMatch') mustMatch: string[] = [];\r\n\r\n  validate(formGroup: FormGroup): ValidationErrors {\r\n    return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\r\n  }\r\n\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    // return null if controls haven't initialised yet\r\n    if (!control || !matchingControl) {\r\n      return null;\r\n    }\r\n\r\n    // return null if another validator has already found an error on the matchingControl\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return null;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","export default \".form-group{\\r\\n  min-height: 6vw;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFlO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1ncm91cHtcclxuICBtaW4taGVpZ2h0OiA2dnc7XHJcbn0iXX0= */\"","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Applicant } from '../models/applicant.model';\r\nimport { User } from '../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\n\r\nexport class SignupComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n  constructor(public authService: AuthService, ) { }\r\n\r\n  isLoading = true;\r\n  isReadOnly = true;\r\n  tempUserName = 'GUEST';\r\n  submittedUserData: Applicant;\r\n  partOneValid = false;\r\n  private validTzId: Subscription;\r\n  cannotRegisterId = false;\r\n\r\n  cityList = ['Select City', 'Tel-Aviv', 'Holon', 'Arad', `Be'er Sheva`, 'Yokneam', 'Rehovot', 'Safed', 'Netivot', 'Eilat', 'Metula'];\r\n\r\n  ngOnInit() {\r\n    this.isLoading = false;\r\n    // init user data model for ngform use\r\n    this.submittedUserData = {\r\n      // DEV VARS -- DELETE before production!\r\n      email: 'test2@email.com',\r\n      tzId: '789546322',\r\n      password: 'MooCow1',\r\n      confirmPassword: 'MooCow1',\r\n      city: this.cityList[4],\r\n      street: 'Moo St',\r\n      firstname: 'Jerry',\r\n      lastname: 'Seinfeld',\r\n      // PROD VARS -- ENABLE before production\r\n      // email: '',\r\n      // tzId: '',\r\n      // password: '',\r\n      // confirmPassword: '',\r\n      // city: '',\r\n      // street: '',\r\n      // firstname: '',\r\n      // lastname: '',\r\n    };\r\n\r\n    // deal with pesky autocomplete\r\n    setTimeout(() => {\r\n      this.isReadOnly = false;\r\n    }, 1000);\r\n    this.submittedUserData.city = this.cityList[0];\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n  onSubmitPartOne(form: NgForm) {\r\n\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.uniqueIdAndEmail(this.submittedUserData.tzId, this.submittedUserData.email);\r\n\r\n    // handle this.authservice.uniqueIdAndEmail() response\r\n    this.validTzId = this.authService.validEmailandTzId().subscribe((response) => {\r\n      this.isLoading = false;\r\n      this.partOneValid = response.canUseTzId && response.canUseEmail;\r\n      if (!response.canUseTzId) {\r\n        this.cannotRegisterId = true;\r\n        form.controls.tzId.setErrors({ invalidID: true });\r\n      }\r\n\r\n      if (!response.canUseEmail) {\r\n        this.cannotRegisterId = true;\r\n        form.controls.email.setErrors({ unique: true });\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  onSubmitPartTwo(form: NgForm) {\r\n\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    const applicant = this.submittedUserData;\r\n\r\n    const registerUserData: User = {\r\n      email: applicant.email,\r\n      iic: applicant.tzId,\r\n      password: applicant.password,\r\n      city: applicant.city,\r\n      street: applicant.street,\r\n      firstName: applicant.firstname,\r\n      lastName: applicant.lastname,\r\n      role: false,\r\n      id: '',\r\n    };\r\n    this.isLoading = true;\r\n    this.authService.createUser(registerUserData);\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.validTzId !== undefined) {\r\n      this.validTzId.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}